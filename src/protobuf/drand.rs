// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HomeRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HomeResponse {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
/// Generated client implementations.
pub mod public_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct PublicClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl PublicClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> PublicClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> PublicClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            PublicClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Home is a simple endpoint
        pub async fn home(
            &mut self,
            request: impl tonic::IntoRequest<super::HomeRequest>,
        ) -> std::result::Result<tonic::Response<super::HomeResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Public/Home");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Public", "Home"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod public_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with PublicServer.
    #[async_trait]
    pub trait Public: Send + Sync + 'static {
        /// Home is a simple endpoint
        async fn home(
            &self,
            request: tonic::Request<super::HomeRequest>,
        ) -> std::result::Result<tonic::Response<super::HomeResponse>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct PublicServer<T: Public> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Public> PublicServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for PublicServer<T>
    where
        T: Public,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/drand.Public/Home" => {
                    #[allow(non_camel_case_types)]
                    struct HomeSvc<T: Public>(pub Arc<T>);
                    impl<T: Public> tonic::server::UnaryService<super::HomeRequest>
                    for HomeSvc<T> {
                        type Response = super::HomeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HomeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Public>::home(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = HomeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Public> Clone for PublicServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Public> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Public> tonic::server::NamedService for PublicServer<T> {
        const NAME: &'static str = "drand.Public";
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IdentityRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IdentityResponse {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "3")]
    pub tls: bool,
    /// BLS signature over the identity to prove possession of the private key
    #[prost(bytes = "vec", tag = "4")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// --------------
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
    /// We need to specify the scheme name to make sure the key is getting probably
    /// decoded on the client side
    #[prost(string, tag = "6")]
    pub scheme_name: ::prost::alloc::string::String,
}
/// SignalDKGPacket is the packet nodes send to a coordinator that collects all
/// keys and setups the group and sends them back to the nodes such that they can
/// start the DKG automatically.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignalDkgPacket {
    #[prost(message, optional, tag = "1")]
    pub node: ::core::option::Option<super::common::Identity>,
    #[prost(bytes = "vec", tag = "2")]
    pub secret_proof: ::prost::alloc::vec::Vec<u8>,
    /// In resharing cases, previous_group_hash is the hash of the previous group.
    /// It is to make sure the nodes build on top of the correct previous group.
    #[prost(bytes = "vec", tag = "3")]
    pub previous_group_hash: ::prost::alloc::vec::Vec<u8>,
    ///
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
/// PushDKGInfor is the packet the coordinator sends that contains the group over
/// which to run the DKG on, the secret proof (to prove it's he's part of the
/// expected group, and it's not a random packet) and as well the time at which
/// every node should start the DKG.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DkgInfoPacket {
    #[prost(message, optional, tag = "1")]
    pub new_group: ::core::option::Option<super::common::GroupPacket>,
    #[prost(bytes = "vec", tag = "2")]
    pub secret_proof: ::prost::alloc::vec::Vec<u8>,
    /// timeout in seconds
    #[prost(uint32, tag = "3")]
    pub dkg_timeout: u32,
    /// signature from the coordinator to prove he is the one sending that group
    /// file.
    #[prost(bytes = "vec", tag = "4")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    ///
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PartialBeaconPacket {
    /// Round is the round for which the beacon will be created from the partial
    /// signatures
    #[prost(uint64, tag = "1")]
    pub round: u64,
    /// signature of the previous round - could be removed at some point but now
    /// is used to verify the signature even before accessing the store
    #[prost(bytes = "vec", tag = "2")]
    pub previous_signature: ::prost::alloc::vec::Vec<u8>,
    /// partial signature - a threshold of them needs to be aggregated to produce
    /// the final beacon at the given round.
    #[prost(bytes = "vec", tag = "3")]
    pub partial_sig: ::prost::alloc::vec::Vec<u8>,
    ///
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
/// DKGPacket is the packet that nodes send to others nodes as part of the
/// broadcasting protocol.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DkgPacket {
    #[prost(message, optional, tag = "1")]
    pub dkg: ::core::option::Option<super::dkg::Packet>,
    ///
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BeaconPacket {
    #[prost(bytes = "vec", tag = "1")]
    pub previous_signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "2")]
    pub round: u64,
    #[prost(bytes = "vec", tag = "3")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
/// Generated client implementations.
pub mod protocol_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ProtocolClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ProtocolClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ProtocolClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ProtocolClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            ProtocolClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        ///   GetIdentity returns the identity of the drand node
        pub async fn get_identity(
            &mut self,
            request: impl tonic::IntoRequest<super::IdentityRequest>,
        ) -> std::result::Result<
            tonic::Response<super::IdentityResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/drand.Protocol/GetIdentity",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("drand.Protocol", "GetIdentity"));
            self.inner.unary(req, path, codec).await
        }
        ///   SignalDKGParticipant is called by non-coordinators nodes that sends
        ///   their public keys and secret proof they have to the coordinator so that
        ///   he can create the group.
        pub async fn signal_dkg_participant(
            &mut self,
            request: impl tonic::IntoRequest<super::SignalDkgPacket>,
        ) -> std::result::Result<
            tonic::Response<super::super::common::Empty>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/drand.Protocol/SignalDKGParticipant",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("drand.Protocol", "SignalDKGParticipant"));
            self.inner.unary(req, path, codec).await
        }
        ///   PushDKGInfo is called by the coordinator to push the group he created
        ///   from all received keys and as well other information such as the time
        ///   of starting the DKG.
        pub async fn push_dkg_info(
            &mut self,
            request: impl tonic::IntoRequest<super::DkgInfoPacket>,
        ) -> std::result::Result<
            tonic::Response<super::super::common::Empty>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/drand.Protocol/PushDKGInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("drand.Protocol", "PushDKGInfo"));
            self.inner.unary(req, path, codec).await
        }
        ///   BroadcastPacket is used during DKG phases
        pub async fn broadcast_dkg(
            &mut self,
            request: impl tonic::IntoRequest<super::DkgPacket>,
        ) -> std::result::Result<
            tonic::Response<super::super::common::Empty>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/drand.Protocol/BroadcastDKG",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("drand.Protocol", "BroadcastDKG"));
            self.inner.unary(req, path, codec).await
        }
        ///   PartialBeacon sends its partial beacon to another node
        pub async fn partial_beacon(
            &mut self,
            request: impl tonic::IntoRequest<super::PartialBeaconPacket>,
        ) -> std::result::Result<
            tonic::Response<super::super::common::Empty>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/drand.Protocol/PartialBeacon",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("drand.Protocol", "PartialBeacon"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod protocol_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ProtocolServer.
    #[async_trait]
    pub trait Protocol: Send + Sync + 'static {
        ///   GetIdentity returns the identity of the drand node
        async fn get_identity(
            &self,
            request: tonic::Request<super::IdentityRequest>,
        ) -> std::result::Result<
            tonic::Response<super::IdentityResponse>,
            tonic::Status,
        >;
        ///   SignalDKGParticipant is called by non-coordinators nodes that sends
        ///   their public keys and secret proof they have to the coordinator so that
        ///   he can create the group.
        async fn signal_dkg_participant(
            &self,
            request: tonic::Request<super::SignalDkgPacket>,
        ) -> std::result::Result<
            tonic::Response<super::super::common::Empty>,
            tonic::Status,
        >;
        ///   PushDKGInfo is called by the coordinator to push the group he created
        ///   from all received keys and as well other information such as the time
        ///   of starting the DKG.
        async fn push_dkg_info(
            &self,
            request: tonic::Request<super::DkgInfoPacket>,
        ) -> std::result::Result<
            tonic::Response<super::super::common::Empty>,
            tonic::Status,
        >;
        ///   BroadcastPacket is used during DKG phases
        async fn broadcast_dkg(
            &self,
            request: tonic::Request<super::DkgPacket>,
        ) -> std::result::Result<
            tonic::Response<super::super::common::Empty>,
            tonic::Status,
        >;
        ///   PartialBeacon sends its partial beacon to another node
        async fn partial_beacon(
            &self,
            request: tonic::Request<super::PartialBeaconPacket>,
        ) -> std::result::Result<
            tonic::Response<super::super::common::Empty>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct ProtocolServer<T: Protocol> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Protocol> ProtocolServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ProtocolServer<T>
    where
        T: Protocol,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/drand.Protocol/GetIdentity" => {
                    #[allow(non_camel_case_types)]
                    struct GetIdentitySvc<T: Protocol>(pub Arc<T>);
                    impl<T: Protocol> tonic::server::UnaryService<super::IdentityRequest>
                    for GetIdentitySvc<T> {
                        type Response = super::IdentityResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::IdentityRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Protocol>::get_identity(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetIdentitySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Protocol/SignalDKGParticipant" => {
                    #[allow(non_camel_case_types)]
                    struct SignalDKGParticipantSvc<T: Protocol>(pub Arc<T>);
                    impl<T: Protocol> tonic::server::UnaryService<super::SignalDkgPacket>
                    for SignalDKGParticipantSvc<T> {
                        type Response = super::super::common::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SignalDkgPacket>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Protocol>::signal_dkg_participant(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SignalDKGParticipantSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Protocol/PushDKGInfo" => {
                    #[allow(non_camel_case_types)]
                    struct PushDKGInfoSvc<T: Protocol>(pub Arc<T>);
                    impl<T: Protocol> tonic::server::UnaryService<super::DkgInfoPacket>
                    for PushDKGInfoSvc<T> {
                        type Response = super::super::common::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DkgInfoPacket>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Protocol>::push_dkg_info(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PushDKGInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Protocol/BroadcastDKG" => {
                    #[allow(non_camel_case_types)]
                    struct BroadcastDKGSvc<T: Protocol>(pub Arc<T>);
                    impl<T: Protocol> tonic::server::UnaryService<super::DkgPacket>
                    for BroadcastDKGSvc<T> {
                        type Response = super::super::common::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DkgPacket>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Protocol>::broadcast_dkg(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = BroadcastDKGSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Protocol/PartialBeacon" => {
                    #[allow(non_camel_case_types)]
                    struct PartialBeaconSvc<T: Protocol>(pub Arc<T>);
                    impl<
                        T: Protocol,
                    > tonic::server::UnaryService<super::PartialBeaconPacket>
                    for PartialBeaconSvc<T> {
                        type Response = super::super::common::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PartialBeaconPacket>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Protocol>::partial_beacon(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PartialBeaconSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Protocol> Clone for ProtocolServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Protocol> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Protocol> tonic::server::NamedService for ProtocolServer<T> {
        const NAME: &'static str = "drand.Protocol";
    }
}
/// SetupInfoPacket contains all information necessary to run an "automatic"
/// setup phase where the designated leader acts as a coordinator as to what is
/// the group file and when does the chain starts.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetupInfoPacket {
    #[prost(bool, tag = "1")]
    pub leader: bool,
    /// LeaderAddress is only used by non-leader
    #[prost(string, tag = "2")]
    pub leader_address: ::prost::alloc::string::String,
    /// LeaderTls is only used by non-leader
    #[prost(bool, tag = "3")]
    pub leader_tls: bool,
    /// the expected number of nodes the group must have
    #[prost(uint32, tag = "4")]
    pub nodes: u32,
    /// the threshold to set to the group
    #[prost(uint32, tag = "5")]
    pub threshold: u32,
    /// timeout of the dkg - it is used for transitioning to the different phases
    /// of the dkg (deal, responses and justifications if needed). Unit is in
    /// seconds.
    #[prost(uint32, tag = "6")]
    pub timeout: u32,
    /// This field is used by the coordinator to set a genesis time or transition
    /// time for the beacon to start. It normally takes time.Now() +
    /// beacon_offset.  This offset MUST be superior to the time it takes to
    /// run the DKG, even under "malicious case" when the dkg takes longer.
    /// In such cases, the dkg takes 3 * timeout time to finish because of the
    /// three phases: deal, responses and justifications.
    /// XXX: should find a way to designate the time *after* the DKG - beacon
    /// generation and dkg should be more separated.
    #[prost(uint32, tag = "7")]
    pub beacon_offset: u32,
    /// dkg_offset is used to set the time for which nodes should start the DKG.
    /// To avoid any concurrency / networking effect where nodes start the DKG
    /// while some others still haven't received the group configuration, the
    /// coordinator do this in two steps: first, send the group configuration to
    /// every node, and then every node start at the specified time. This offset
    /// is set to be sufficiently large such that with high confidence all nodes
    /// received the group file by then.
    #[prost(uint32, tag = "8")]
    pub dkg_offset: u32,
    /// the secret used to authentify group members
    #[prost(bytes = "vec", tag = "9")]
    pub secret: ::prost::alloc::vec::Vec<u8>,
    /// indicating to the node that this (re)share operation should be started
    /// even if there is already one in progress.
    #[prost(bool, tag = "10")]
    pub force: bool,
    #[prost(message, optional, tag = "11")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitDkgPacket {
    #[prost(message, optional, tag = "1")]
    pub info: ::core::option::Option<SetupInfoPacket>,
    #[prost(message, optional, tag = "2")]
    pub entropy: ::core::option::Option<EntropyInfo>,
    /// the period time of the beacon in seconds.
    /// used only in a fresh dkg
    #[prost(uint32, tag = "3")]
    pub beacon_period: u32,
    /// the minimum beacon period when in catchup.
    #[prost(uint32, tag = "4")]
    pub catchup_period: u32,
    /// since v1.5.0 this must be passed upon key generation
    #[deprecated]
    #[prost(string, tag = "5")]
    pub scheme_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitDkgPacketResponse {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
/// EntropyInfo contains information about external entropy sources
/// can be optional
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntropyInfo {
    /// the path to the script to run that returns random bytes when called
    #[prost(string, tag = "1")]
    pub script: ::prost::alloc::string::String,
    /// do we only take this entropy source or mix it with /dev/urandom
    #[prost(bool, tag = "10")]
    pub user_only: bool,
    #[prost(message, optional, tag = "11")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
/// ReshareRequest contains references to the old and new group to perform the
/// resharing protocol.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitResharePacket {
    /// Old group that needs to issue the shares for the new group
    /// NOTE: It can be empty / nil. In that case, the drand node will try to
    /// load the group he belongs to at the moment, if any, and use it as the old
    /// group.
    #[prost(message, optional, tag = "1")]
    pub old: ::core::option::Option<GroupInfo>,
    #[prost(message, optional, tag = "2")]
    pub info: ::core::option::Option<SetupInfoPacket>,
    /// the minimum beacon period when in catchup.
    #[prost(bool, tag = "3")]
    pub catchup_period_changed: bool,
    #[prost(uint32, tag = "4")]
    pub catchup_period: u32,
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
/// GroupInfo holds the information to load a group information such as the nodes
/// and the genesis etc. Currently only the loading of a group via filesystem is
/// supported although the basis to support loading a group from a URI is setup.
/// For example, for new nodes that wants to join a network, they could point to
/// the URL that returns a group definition, for example at one of the currently
/// running node.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupInfo {
    #[prost(oneof = "group_info::Location", tags = "1, 2")]
    pub location: ::core::option::Option<group_info::Location>,
}
/// Nested message and enum types in `GroupInfo`.
pub mod group_info {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Location {
        #[prost(string, tag = "1")]
        Path(::prost::alloc::string::String),
        /// XXX not implemented
        #[prost(string, tag = "2")]
        Url(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ping {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pong {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolInfoRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolInfoResponse {
    #[prost(string, tag = "1")]
    pub pool_info: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListSchemesRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListSchemesResponse {
    #[prost(string, repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListBeaconIDsRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListBeaconIDsResponse {
    #[prost(string, repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
/// PublicKeyRequest requests the public key of a drand node
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicKeyRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
/// PublicKeyResponse holds the public key of a drand node
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicKeyResponse {
    #[prost(bytes = "vec", tag = "2")]
    pub pub_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "3")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShutdownRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShutdownResponse {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoadBeaconRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoadBeaconResponse {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::common::Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitDkgResponse {
    #[prost(string, tag = "1")]
    pub share_path: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod control_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ControlClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ControlClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ControlClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ControlClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            ControlClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// ListSchemes responds with the list of ids for the available schemes
        pub async fn list_schemes(
            &mut self,
            request: impl tonic::IntoRequest<super::ListSchemesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListSchemesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/drand.Control/ListSchemes",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Control", "ListSchemes"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn pool_info(
            &mut self,
            request: impl tonic::IntoRequest<super::PoolInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PoolInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Control/PoolInfo");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Control", "PoolInfo"));
            self.inner.unary(req, path, codec).await
        }
        /// InitDKG sends information to daemon to start a fresh DKG protocol
        pub async fn init_dkg(
            &mut self,
            request: impl tonic::IntoRequest<super::InitDkgPacket>,
        ) -> std::result::Result<
            tonic::Response<super::InitDkgResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Control/InitDKG");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Control", "InitDKG"));
            self.inner.unary(req, path, codec).await
        }
        /// PublicKey returns the longterm public key of the drand node
        pub async fn public_key(
            &mut self,
            request: impl tonic::IntoRequest<super::PublicKeyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PublicKeyResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Control/PublicKey");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Control", "PublicKey"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn shutdown(
            &mut self,
            request: impl tonic::IntoRequest<super::ShutdownRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ShutdownResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Control/Shutdown");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Control", "Shutdown"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn load_beacon(
            &mut self,
            request: impl tonic::IntoRequest<super::LoadBeaconRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LoadBeaconResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Control/LoadBeacon");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Control", "LoadBeacon"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod control_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ControlServer.
    #[async_trait]
    pub trait Control: Send + Sync + 'static {
        /// ListSchemes responds with the list of ids for the available schemes
        async fn list_schemes(
            &self,
            request: tonic::Request<super::ListSchemesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListSchemesResponse>,
            tonic::Status,
        >;
        async fn pool_info(
            &self,
            request: tonic::Request<super::PoolInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PoolInfoResponse>,
            tonic::Status,
        >;
        /// InitDKG sends information to daemon to start a fresh DKG protocol
        async fn init_dkg(
            &self,
            request: tonic::Request<super::InitDkgPacket>,
        ) -> std::result::Result<tonic::Response<super::InitDkgResponse>, tonic::Status>;
        /// PublicKey returns the longterm public key of the drand node
        async fn public_key(
            &self,
            request: tonic::Request<super::PublicKeyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PublicKeyResponse>,
            tonic::Status,
        >;
        async fn shutdown(
            &self,
            request: tonic::Request<super::ShutdownRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ShutdownResponse>,
            tonic::Status,
        >;
        async fn load_beacon(
            &self,
            request: tonic::Request<super::LoadBeaconRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LoadBeaconResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct ControlServer<T: Control> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Control> ControlServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ControlServer<T>
    where
        T: Control,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/drand.Control/ListSchemes" => {
                    #[allow(non_camel_case_types)]
                    struct ListSchemesSvc<T: Control>(pub Arc<T>);
                    impl<
                        T: Control,
                    > tonic::server::UnaryService<super::ListSchemesRequest>
                    for ListSchemesSvc<T> {
                        type Response = super::ListSchemesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListSchemesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::list_schemes(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ListSchemesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Control/PoolInfo" => {
                    #[allow(non_camel_case_types)]
                    struct PoolInfoSvc<T: Control>(pub Arc<T>);
                    impl<T: Control> tonic::server::UnaryService<super::PoolInfoRequest>
                    for PoolInfoSvc<T> {
                        type Response = super::PoolInfoResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PoolInfoRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::pool_info(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PoolInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Control/InitDKG" => {
                    #[allow(non_camel_case_types)]
                    struct InitDKGSvc<T: Control>(pub Arc<T>);
                    impl<T: Control> tonic::server::UnaryService<super::InitDkgPacket>
                    for InitDKGSvc<T> {
                        type Response = super::InitDkgResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InitDkgPacket>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::init_dkg(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = InitDKGSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Control/PublicKey" => {
                    #[allow(non_camel_case_types)]
                    struct PublicKeySvc<T: Control>(pub Arc<T>);
                    impl<T: Control> tonic::server::UnaryService<super::PublicKeyRequest>
                    for PublicKeySvc<T> {
                        type Response = super::PublicKeyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PublicKeyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::public_key(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PublicKeySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Control/Shutdown" => {
                    #[allow(non_camel_case_types)]
                    struct ShutdownSvc<T: Control>(pub Arc<T>);
                    impl<T: Control> tonic::server::UnaryService<super::ShutdownRequest>
                    for ShutdownSvc<T> {
                        type Response = super::ShutdownResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ShutdownRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::shutdown(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ShutdownSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Control/LoadBeacon" => {
                    #[allow(non_camel_case_types)]
                    struct LoadBeaconSvc<T: Control>(pub Arc<T>);
                    impl<
                        T: Control,
                    > tonic::server::UnaryService<super::LoadBeaconRequest>
                    for LoadBeaconSvc<T> {
                        type Response = super::LoadBeaconResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LoadBeaconRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::load_beacon(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = LoadBeaconSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Control> Clone for ControlServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Control> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Control> tonic::server::NamedService for ControlServer<T> {
        const NAME: &'static str = "drand.Control";
    }
}
