// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeVersion {
    #[prost(uint32, tag = "1")]
    pub major: u32,
    #[prost(uint32, tag = "2")]
    pub minor: u32,
    #[prost(uint32, tag = "3")]
    pub patch: u32,
    #[prost(string, tag = "4")]
    pub prerelease: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Metadata {
    #[prost(message, optional, tag = "1")]
    pub node_version: ::core::option::Option<NodeVersion>,
    #[prost(string, tag = "2")]
    pub beacon_id: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    pub chain_hash: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DkgStatus {
    #[prost(uint32, tag = "1")]
    pub status: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BeaconStatus {
    #[prost(uint32, tag = "1")]
    pub status: u32,
    #[prost(bool, tag = "2")]
    pub is_running: bool,
    #[prost(bool, tag = "3")]
    pub is_stopped: bool,
    #[prost(bool, tag = "4")]
    pub is_started: bool,
    #[prost(bool, tag = "5")]
    pub is_serving: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChainStoreStatus {
    #[prost(bool, tag = "1")]
    pub is_empty: bool,
    #[prost(uint64, tag = "2")]
    pub last_stored: u64,
    #[prost(uint64, tag = "3")]
    pub expected_last: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Address {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatusRequest {
    /// the check_conn contains the list of addresses to check connectivity to,
    /// i.e. does a GRPC health check on it.
    /// If the field is absent or empty, then all nodes in the group file are
    /// tested.
    #[prost(message, repeated, tag = "1")]
    pub check_conn: ::prost::alloc::vec::Vec<Address>,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<Metadata>,
}
/// StatusResponse contains different indicators of the status of the local drand
/// node process and as well some view on the connectivity with other nodes if
/// ask during the StatusRequest.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatusResponse {
    #[prost(message, optional, tag = "1")]
    pub dkg: ::core::option::Option<DkgStatus>,
    #[prost(uint32, tag = "2")]
    pub epoch: u32,
    #[prost(message, optional, tag = "3")]
    pub beacon: ::core::option::Option<BeaconStatus>,
    #[prost(message, optional, tag = "4")]
    pub chain_store: ::core::option::Option<ChainStoreStatus>,
    #[prost(map = "string, bool", tag = "5")]
    pub connections: ::std::collections::HashMap<::prost::alloc::string::String, bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Empty {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<Metadata>,
}
/// REMINDER: This fields should be kept in sync with IdentityResponse message,
/// except for the beaconID and schemeID
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Identity {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    /// BLS signature over the identity to prove possession of the private key, it
    /// also verify the scheme used
    #[prost(bytes = "vec", tag = "4")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
/// Node holds the information related to a server in a group that forms a drand
/// network
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Node {
    #[prost(message, optional, tag = "1")]
    pub public: ::core::option::Option<Identity>,
    #[prost(uint32, tag = "2")]
    pub index: u32,
}
/// GroupPacket represents a group that is running a drand network (or is in the
/// process of creating one or performing a resharing).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupPacket {
    #[prost(message, repeated, tag = "1")]
    pub nodes: ::prost::alloc::vec::Vec<Node>,
    #[prost(uint32, tag = "2")]
    pub threshold: u32,
    /// period in seconds
    #[prost(uint32, tag = "3")]
    pub period: u32,
    #[prost(uint64, tag = "4")]
    pub genesis_time: u64,
    #[prost(uint64, tag = "5")]
    pub transition_time: u64,
    #[prost(bytes = "vec", tag = "6")]
    pub genesis_seed: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", repeated, tag = "7")]
    pub dist_key: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// catchup_period in seconds
    #[prost(uint32, tag = "8")]
    pub catchup_period: u32,
    #[prost(string, tag = "9")]
    pub scheme_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "10")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChainInfoRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChainInfoPacket {
    /// marshalled public key
    #[prost(bytes = "vec", tag = "1")]
    pub public_key: ::prost::alloc::vec::Vec<u8>,
    /// period in seconds
    #[prost(uint32, tag = "2")]
    pub period: u32,
    /// genesis time of the chain
    #[prost(int64, tag = "3")]
    pub genesis_time: i64,
    /// hash is included for ease of use - not needing to have a drand client to
    /// compute its hash
    #[prost(bytes = "vec", tag = "4")]
    pub hash: ::prost::alloc::vec::Vec<u8>,
    /// hash of the genesis group
    #[prost(bytes = "vec", tag = "5")]
    pub group_hash: ::prost::alloc::vec::Vec<u8>,
    /// indicates a set of values the process will use to act in specific ways
    #[prost(string, tag = "6")]
    pub scheme_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "7")]
    pub metadata: ::core::option::Option<Metadata>,
}
/// EntropyInfo contains information about external entropy sources
/// can be optional
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntropyInfo {
    /// the path to the script to run that returns random bytes when called
    #[prost(string, tag = "1")]
    pub script: ::prost::alloc::string::String,
    /// do we only take this entropy source or mix it with /dev/urandom
    #[prost(bool, tag = "10")]
    pub user_only: bool,
    #[prost(message, optional, tag = "11")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ping {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pong {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<Metadata>,
}
/// RemoteStatusRequest contains the list of addresses that the local drand node
/// process should ask the status to.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoteStatusRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<Metadata>,
    #[prost(message, repeated, tag = "2")]
    pub addresses: ::prost::alloc::vec::Vec<Address>,
}
/// RemoteStatusResponse contains the statuses reponses of all nodes given in the
/// requests. If a node did not reply, then the address key is absent from the
/// map
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoteStatusResponse {
    #[prost(map = "string, message", tag = "1")]
    pub statuses: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        StatusResponse,
    >,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ListSchemesRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListSchemesResponse {
    #[prost(string, repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<Metadata>,
}
/// PublicKeyRequest requests the public key of a drand node for a given Beacon
/// ID
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicKeyRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<Metadata>,
}
/// PublicKeyResponse holds the public key of a drand node
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicKeyResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub pub_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "2")]
    pub addr: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<Metadata>,
    #[prost(string, tag = "6")]
    pub scheme_name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShutdownRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShutdownResponse {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoadBeaconRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoadBeaconResponse {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartSyncRequest {
    /// nodes to contact to
    #[prost(string, repeated, tag = "2")]
    pub nodes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// up_to tells the drand daemon to not sync up after the given round.
    /// if up_to is 0, the sync operation continues until it is canceled.
    #[prost(uint64, tag = "4")]
    pub up_to: u64,
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncProgress {
    #[prost(uint64, tag = "1")]
    pub current: u64,
    #[prost(uint64, tag = "2")]
    pub target: u64,
    #[prost(message, optional, tag = "3")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BackupDbRequest {
    #[prost(string, tag = "1")]
    pub output_file: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BackupDbResponse {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<Metadata>,
}
/// Generated client implementations.
pub mod control_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ControlClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ControlClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ControlClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ControlClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ControlClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// PingPong returns an empty message. Purpose is to test the control port.
        pub async fn ping_pong(
            &mut self,
            request: impl tonic::IntoRequest<super::Ping>,
        ) -> std::result::Result<tonic::Response<super::Pong>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Control/PingPong");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Control", "PingPong"));
            self.inner.unary(req, path, codec).await
        }
        /// Status responds with the actual status of drand process
        pub async fn status(
            &mut self,
            request: impl tonic::IntoRequest<super::StatusRequest>,
        ) -> std::result::Result<tonic::Response<super::StatusResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Control/Status");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Control", "Status"));
            self.inner.unary(req, path, codec).await
        }
        /// ListSchemes responds with the list of ids for the available schemes
        pub async fn list_schemes(
            &mut self,
            request: impl tonic::IntoRequest<super::ListSchemesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListSchemesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/drand.Control/ListSchemes",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Control", "ListSchemes"));
            self.inner.unary(req, path, codec).await
        }
        /// PublicKey returns the longterm public key of the drand node
        pub async fn public_key(
            &mut self,
            request: impl tonic::IntoRequest<super::PublicKeyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PublicKeyResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Control/PublicKey");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Control", "PublicKey"));
            self.inner.unary(req, path, codec).await
        }
        /// ChainInfo returns the chain info for the chain hash or beacon id requested
        /// in the metadata
        pub async fn chain_info(
            &mut self,
            request: impl tonic::IntoRequest<super::ChainInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ChainInfoPacket>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Control/ChainInfo");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Control", "ChainInfo"));
            self.inner.unary(req, path, codec).await
        }
        /// GroupFile returns the TOML-encoded group file, containing the group public
        /// key and coefficients
        pub async fn group_file(
            &mut self,
            request: impl tonic::IntoRequest<super::GroupRequest>,
        ) -> std::result::Result<tonic::Response<super::GroupPacket>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Control/GroupFile");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Control", "GroupFile"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn shutdown(
            &mut self,
            request: impl tonic::IntoRequest<super::ShutdownRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ShutdownResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Control/Shutdown");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Control", "Shutdown"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn load_beacon(
            &mut self,
            request: impl tonic::IntoRequest<super::LoadBeaconRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LoadBeaconResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Control/LoadBeacon");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Control", "LoadBeacon"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn start_follow_chain(
            &mut self,
            request: impl tonic::IntoRequest<super::StartSyncRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SyncProgress>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/drand.Control/StartFollowChain",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("drand.Control", "StartFollowChain"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn start_check_chain(
            &mut self,
            request: impl tonic::IntoRequest<super::StartSyncRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SyncProgress>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/drand.Control/StartCheckChain",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("drand.Control", "StartCheckChain"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn backup_database(
            &mut self,
            request: impl tonic::IntoRequest<super::BackupDbRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BackupDbResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/drand.Control/BackupDatabase",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("drand.Control", "BackupDatabase"));
            self.inner.unary(req, path, codec).await
        }
        /// RemoteStatus request the status of some remote drand nodes
        pub async fn remote_status(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoteStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoteStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/drand.Control/RemoteStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("drand.Control", "RemoteStatus"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod control_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ControlServer.
    #[async_trait]
    pub trait Control: std::marker::Send + std::marker::Sync + 'static {
        /// PingPong returns an empty message. Purpose is to test the control port.
        async fn ping_pong(
            &self,
            request: tonic::Request<super::Ping>,
        ) -> std::result::Result<tonic::Response<super::Pong>, tonic::Status>;
        /// Status responds with the actual status of drand process
        async fn status(
            &self,
            request: tonic::Request<super::StatusRequest>,
        ) -> std::result::Result<tonic::Response<super::StatusResponse>, tonic::Status>;
        /// ListSchemes responds with the list of ids for the available schemes
        async fn list_schemes(
            &self,
            request: tonic::Request<super::ListSchemesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListSchemesResponse>,
            tonic::Status,
        >;
        /// PublicKey returns the longterm public key of the drand node
        async fn public_key(
            &self,
            request: tonic::Request<super::PublicKeyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PublicKeyResponse>,
            tonic::Status,
        >;
        /// ChainInfo returns the chain info for the chain hash or beacon id requested
        /// in the metadata
        async fn chain_info(
            &self,
            request: tonic::Request<super::ChainInfoRequest>,
        ) -> std::result::Result<tonic::Response<super::ChainInfoPacket>, tonic::Status>;
        /// GroupFile returns the TOML-encoded group file, containing the group public
        /// key and coefficients
        async fn group_file(
            &self,
            request: tonic::Request<super::GroupRequest>,
        ) -> std::result::Result<tonic::Response<super::GroupPacket>, tonic::Status>;
        async fn shutdown(
            &self,
            request: tonic::Request<super::ShutdownRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ShutdownResponse>,
            tonic::Status,
        >;
        async fn load_beacon(
            &self,
            request: tonic::Request<super::LoadBeaconRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LoadBeaconResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the StartFollowChain method.
        type StartFollowChainStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::SyncProgress, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn start_follow_chain(
            &self,
            request: tonic::Request<super::StartSyncRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::StartFollowChainStream>,
            tonic::Status,
        >;
        /// Server streaming response type for the StartCheckChain method.
        type StartCheckChainStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::SyncProgress, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn start_check_chain(
            &self,
            request: tonic::Request<super::StartSyncRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::StartCheckChainStream>,
            tonic::Status,
        >;
        async fn backup_database(
            &self,
            request: tonic::Request<super::BackupDbRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BackupDbResponse>,
            tonic::Status,
        >;
        /// RemoteStatus request the status of some remote drand nodes
        async fn remote_status(
            &self,
            request: tonic::Request<super::RemoteStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoteStatusResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct ControlServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ControlServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ControlServer<T>
    where
        T: Control,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/drand.Control/PingPong" => {
                    #[allow(non_camel_case_types)]
                    struct PingPongSvc<T: Control>(pub Arc<T>);
                    impl<T: Control> tonic::server::UnaryService<super::Ping>
                    for PingPongSvc<T> {
                        type Response = super::Pong;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Ping>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::ping_pong(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PingPongSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Control/Status" => {
                    #[allow(non_camel_case_types)]
                    struct StatusSvc<T: Control>(pub Arc<T>);
                    impl<T: Control> tonic::server::UnaryService<super::StatusRequest>
                    for StatusSvc<T> {
                        type Response = super::StatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::status(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Control/ListSchemes" => {
                    #[allow(non_camel_case_types)]
                    struct ListSchemesSvc<T: Control>(pub Arc<T>);
                    impl<
                        T: Control,
                    > tonic::server::UnaryService<super::ListSchemesRequest>
                    for ListSchemesSvc<T> {
                        type Response = super::ListSchemesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListSchemesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::list_schemes(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListSchemesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Control/PublicKey" => {
                    #[allow(non_camel_case_types)]
                    struct PublicKeySvc<T: Control>(pub Arc<T>);
                    impl<T: Control> tonic::server::UnaryService<super::PublicKeyRequest>
                    for PublicKeySvc<T> {
                        type Response = super::PublicKeyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PublicKeyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::public_key(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PublicKeySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Control/ChainInfo" => {
                    #[allow(non_camel_case_types)]
                    struct ChainInfoSvc<T: Control>(pub Arc<T>);
                    impl<T: Control> tonic::server::UnaryService<super::ChainInfoRequest>
                    for ChainInfoSvc<T> {
                        type Response = super::ChainInfoPacket;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChainInfoRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::chain_info(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChainInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Control/GroupFile" => {
                    #[allow(non_camel_case_types)]
                    struct GroupFileSvc<T: Control>(pub Arc<T>);
                    impl<T: Control> tonic::server::UnaryService<super::GroupRequest>
                    for GroupFileSvc<T> {
                        type Response = super::GroupPacket;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GroupRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::group_file(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GroupFileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Control/Shutdown" => {
                    #[allow(non_camel_case_types)]
                    struct ShutdownSvc<T: Control>(pub Arc<T>);
                    impl<T: Control> tonic::server::UnaryService<super::ShutdownRequest>
                    for ShutdownSvc<T> {
                        type Response = super::ShutdownResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ShutdownRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::shutdown(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ShutdownSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Control/LoadBeacon" => {
                    #[allow(non_camel_case_types)]
                    struct LoadBeaconSvc<T: Control>(pub Arc<T>);
                    impl<
                        T: Control,
                    > tonic::server::UnaryService<super::LoadBeaconRequest>
                    for LoadBeaconSvc<T> {
                        type Response = super::LoadBeaconResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LoadBeaconRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::load_beacon(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LoadBeaconSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Control/StartFollowChain" => {
                    #[allow(non_camel_case_types)]
                    struct StartFollowChainSvc<T: Control>(pub Arc<T>);
                    impl<
                        T: Control,
                    > tonic::server::ServerStreamingService<super::StartSyncRequest>
                    for StartFollowChainSvc<T> {
                        type Response = super::SyncProgress;
                        type ResponseStream = T::StartFollowChainStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StartSyncRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::start_follow_chain(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StartFollowChainSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Control/StartCheckChain" => {
                    #[allow(non_camel_case_types)]
                    struct StartCheckChainSvc<T: Control>(pub Arc<T>);
                    impl<
                        T: Control,
                    > tonic::server::ServerStreamingService<super::StartSyncRequest>
                    for StartCheckChainSvc<T> {
                        type Response = super::SyncProgress;
                        type ResponseStream = T::StartCheckChainStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StartSyncRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::start_check_chain(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StartCheckChainSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Control/BackupDatabase" => {
                    #[allow(non_camel_case_types)]
                    struct BackupDatabaseSvc<T: Control>(pub Arc<T>);
                    impl<T: Control> tonic::server::UnaryService<super::BackupDbRequest>
                    for BackupDatabaseSvc<T> {
                        type Response = super::BackupDbResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BackupDbRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::backup_database(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = BackupDatabaseSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Control/RemoteStatus" => {
                    #[allow(non_camel_case_types)]
                    struct RemoteStatusSvc<T: Control>(pub Arc<T>);
                    impl<
                        T: Control,
                    > tonic::server::UnaryService<super::RemoteStatusRequest>
                    for RemoteStatusSvc<T> {
                        type Response = super::RemoteStatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemoteStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Control>::remote_status(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoteStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ControlServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "drand.Control";
    impl<T> tonic::server::NamedService for ControlServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IdentityRequest {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IdentityResponse {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    /// BLS signature over the identity to prove possession of the private key
    #[prost(bytes = "vec", tag = "4")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// --------------
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<Metadata>,
    /// We need to specify the scheme name to make sure the key is getting probably
    /// decoded on the client side
    #[prost(string, tag = "6")]
    pub scheme_name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PartialBeaconPacket {
    /// Round is the round for which the beacon will be created from the partial
    /// signatures
    #[prost(uint64, tag = "1")]
    pub round: u64,
    /// signature of the previous round - could be removed at some point but now
    /// is used to verify the signature even before accessing the store
    #[prost(bytes = "vec", tag = "2")]
    pub previous_signature: ::prost::alloc::vec::Vec<u8>,
    /// partial signature - a threshold of them needs to be aggregated to produce
    /// the final beacon at the given round.
    #[prost(bytes = "vec", tag = "3")]
    pub partial_sig: ::prost::alloc::vec::Vec<u8>,
    ///
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<Metadata>,
}
/// SyncRequest is from a node that needs to sync up with the current head of the
/// chain
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncRequest {
    #[prost(uint64, tag = "1")]
    pub from_round: u64,
    ///
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BeaconPacket {
    #[prost(bytes = "vec", tag = "1")]
    pub previous_signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "2")]
    pub round: u64,
    #[prost(bytes = "vec", tag = "3")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<Metadata>,
}
/// Generated client implementations.
pub mod protocol_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ProtocolClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ProtocolClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ProtocolClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ProtocolClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ProtocolClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// GetIdentity returns the identity of the drand node
        pub async fn get_identity(
            &mut self,
            request: impl tonic::IntoRequest<super::IdentityRequest>,
        ) -> std::result::Result<
            tonic::Response<super::IdentityResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/drand.Protocol/GetIdentity",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("drand.Protocol", "GetIdentity"));
            self.inner.unary(req, path, codec).await
        }
        /// PartialBeacon sends its partial beacon to another node
        pub async fn partial_beacon(
            &mut self,
            request: impl tonic::IntoRequest<super::PartialBeaconPacket>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/drand.Protocol/PartialBeacon",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("drand.Protocol", "PartialBeacon"));
            self.inner.unary(req, path, codec).await
        }
        /// SyncRequest forces a daemon to sync up its chain with other nodes
        pub async fn sync_chain(
            &mut self,
            request: impl tonic::IntoRequest<super::SyncRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::BeaconPacket>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Protocol/SyncChain");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Protocol", "SyncChain"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Status responds with the actual status of drand process
        pub async fn status(
            &mut self,
            request: impl tonic::IntoRequest<super::StatusRequest>,
        ) -> std::result::Result<tonic::Response<super::StatusResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Protocol/Status");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Protocol", "Status"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod protocol_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ProtocolServer.
    #[async_trait]
    pub trait Protocol: std::marker::Send + std::marker::Sync + 'static {
        /// GetIdentity returns the identity of the drand node
        async fn get_identity(
            &self,
            request: tonic::Request<super::IdentityRequest>,
        ) -> std::result::Result<
            tonic::Response<super::IdentityResponse>,
            tonic::Status,
        >;
        /// PartialBeacon sends its partial beacon to another node
        async fn partial_beacon(
            &self,
            request: tonic::Request<super::PartialBeaconPacket>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Server streaming response type for the SyncChain method.
        type SyncChainStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::BeaconPacket, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// SyncRequest forces a daemon to sync up its chain with other nodes
        async fn sync_chain(
            &self,
            request: tonic::Request<super::SyncRequest>,
        ) -> std::result::Result<tonic::Response<Self::SyncChainStream>, tonic::Status>;
        /// Status responds with the actual status of drand process
        async fn status(
            &self,
            request: tonic::Request<super::StatusRequest>,
        ) -> std::result::Result<tonic::Response<super::StatusResponse>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct ProtocolServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ProtocolServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ProtocolServer<T>
    where
        T: Protocol,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/drand.Protocol/GetIdentity" => {
                    #[allow(non_camel_case_types)]
                    struct GetIdentitySvc<T: Protocol>(pub Arc<T>);
                    impl<T: Protocol> tonic::server::UnaryService<super::IdentityRequest>
                    for GetIdentitySvc<T> {
                        type Response = super::IdentityResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::IdentityRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Protocol>::get_identity(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetIdentitySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Protocol/PartialBeacon" => {
                    #[allow(non_camel_case_types)]
                    struct PartialBeaconSvc<T: Protocol>(pub Arc<T>);
                    impl<
                        T: Protocol,
                    > tonic::server::UnaryService<super::PartialBeaconPacket>
                    for PartialBeaconSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PartialBeaconPacket>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Protocol>::partial_beacon(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PartialBeaconSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Protocol/SyncChain" => {
                    #[allow(non_camel_case_types)]
                    struct SyncChainSvc<T: Protocol>(pub Arc<T>);
                    impl<
                        T: Protocol,
                    > tonic::server::ServerStreamingService<super::SyncRequest>
                    for SyncChainSvc<T> {
                        type Response = super::BeaconPacket;
                        type ResponseStream = T::SyncChainStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SyncRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Protocol>::sync_chain(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SyncChainSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Protocol/Status" => {
                    #[allow(non_camel_case_types)]
                    struct StatusSvc<T: Protocol>(pub Arc<T>);
                    impl<T: Protocol> tonic::server::UnaryService<super::StatusRequest>
                    for StatusSvc<T> {
                        type Response = super::StatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Protocol>::status(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ProtocolServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "drand.Protocol";
    impl<T> tonic::server::NamedService for ProtocolServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// PublicRandRequest requests a public random value that has been generated in a
/// unbiasable way and verifiable.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicRandRequest {
    /// round uniquely identifies a beacon. If round == 0 (or unspecified), then
    /// the response will contain the last.
    #[prost(uint64, tag = "1")]
    pub round: u64,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<Metadata>,
}
/// PublicRandResponse holds a signature which is the random value. It can be
/// verified thanks to the distributed public key of the nodes that have ran the
/// DKG protocol and is unbiasable. The randomness can be verified using the BLS
/// verification routine with the message "round || previous_rand".
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PublicRandResponse {
    #[prost(uint64, tag = "1")]
    pub round: u64,
    #[prost(bytes = "vec", tag = "2")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub previous_signature: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ListBeaconIDsRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListBeaconIDsResponse {
    #[prost(string, repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "2")]
    pub metadatas: ::prost::alloc::vec::Vec<Metadata>,
}
/// Generated client implementations.
pub mod public_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct PublicClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl PublicClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> PublicClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> PublicClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            PublicClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// PublicRand is the method that returns the publicly verifiable randomness
        /// generated by the drand network.
        pub async fn public_rand(
            &mut self,
            request: impl tonic::IntoRequest<super::PublicRandRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PublicRandResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Public/PublicRand");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Public", "PublicRand"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn public_rand_stream(
            &mut self,
            request: impl tonic::IntoRequest<super::PublicRandRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::PublicRandResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/drand.Public/PublicRandStream",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("drand.Public", "PublicRandStream"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// ChainInfo returns the information related to the chain this node
        /// participates to
        pub async fn chain_info(
            &mut self,
            request: impl tonic::IntoRequest<super::ChainInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ChainInfoPacket>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Public/ChainInfo");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Public", "ChainInfo"));
            self.inner.unary(req, path, codec).await
        }
        /// ListBeaconIDs responds with the list of Beacon IDs running on that node
        pub async fn list_beacon_i_ds(
            &mut self,
            request: impl tonic::IntoRequest<super::ListBeaconIDsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListBeaconIDsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/drand.Public/ListBeaconIDs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("drand.Public", "ListBeaconIDs"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod public_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with PublicServer.
    #[async_trait]
    pub trait Public: std::marker::Send + std::marker::Sync + 'static {
        /// PublicRand is the method that returns the publicly verifiable randomness
        /// generated by the drand network.
        async fn public_rand(
            &self,
            request: tonic::Request<super::PublicRandRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PublicRandResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the PublicRandStream method.
        type PublicRandStreamStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::PublicRandResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn public_rand_stream(
            &self,
            request: tonic::Request<super::PublicRandRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::PublicRandStreamStream>,
            tonic::Status,
        >;
        /// ChainInfo returns the information related to the chain this node
        /// participates to
        async fn chain_info(
            &self,
            request: tonic::Request<super::ChainInfoRequest>,
        ) -> std::result::Result<tonic::Response<super::ChainInfoPacket>, tonic::Status>;
        /// ListBeaconIDs responds with the list of Beacon IDs running on that node
        async fn list_beacon_i_ds(
            &self,
            request: tonic::Request<super::ListBeaconIDsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListBeaconIDsResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct PublicServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> PublicServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for PublicServer<T>
    where
        T: Public,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/drand.Public/PublicRand" => {
                    #[allow(non_camel_case_types)]
                    struct PublicRandSvc<T: Public>(pub Arc<T>);
                    impl<T: Public> tonic::server::UnaryService<super::PublicRandRequest>
                    for PublicRandSvc<T> {
                        type Response = super::PublicRandResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PublicRandRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Public>::public_rand(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PublicRandSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Public/PublicRandStream" => {
                    #[allow(non_camel_case_types)]
                    struct PublicRandStreamSvc<T: Public>(pub Arc<T>);
                    impl<
                        T: Public,
                    > tonic::server::ServerStreamingService<super::PublicRandRequest>
                    for PublicRandStreamSvc<T> {
                        type Response = super::PublicRandResponse;
                        type ResponseStream = T::PublicRandStreamStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PublicRandRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Public>::public_rand_stream(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PublicRandStreamSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Public/ChainInfo" => {
                    #[allow(non_camel_case_types)]
                    struct ChainInfoSvc<T: Public>(pub Arc<T>);
                    impl<T: Public> tonic::server::UnaryService<super::ChainInfoRequest>
                    for ChainInfoSvc<T> {
                        type Response = super::ChainInfoPacket;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChainInfoRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Public>::chain_info(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ChainInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/drand.Public/ListBeaconIDs" => {
                    #[allow(non_camel_case_types)]
                    struct ListBeaconIDsSvc<T: Public>(pub Arc<T>);
                    impl<
                        T: Public,
                    > tonic::server::UnaryService<super::ListBeaconIDsRequest>
                    for ListBeaconIDsSvc<T> {
                        type Response = super::ListBeaconIDsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListBeaconIDsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Public>::list_beacon_i_ds(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListBeaconIDsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for PublicServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "drand.Public";
    impl<T> tonic::server::NamedService for PublicServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MetricsRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MetricsResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub metrics: ::prost::alloc::vec::Vec<u8>,
}
/// Generated client implementations.
pub mod metrics_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct MetricsClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MetricsClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MetricsClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MetricsClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MetricsClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn metrics(
            &mut self,
            request: impl tonic::IntoRequest<super::MetricsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MetricsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/drand.Metrics/Metrics");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("drand.Metrics", "Metrics"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod metrics_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MetricsServer.
    #[async_trait]
    pub trait Metrics: std::marker::Send + std::marker::Sync + 'static {
        async fn metrics(
            &self,
            request: tonic::Request<super::MetricsRequest>,
        ) -> std::result::Result<tonic::Response<super::MetricsResponse>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct MetricsServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MetricsServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MetricsServer<T>
    where
        T: Metrics,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/drand.Metrics/Metrics" => {
                    #[allow(non_camel_case_types)]
                    struct MetricsSvc<T: Metrics>(pub Arc<T>);
                    impl<T: Metrics> tonic::server::UnaryService<super::MetricsRequest>
                    for MetricsSvc<T> {
                        type Response = super::MetricsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MetricsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Metrics>::metrics(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = MetricsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MetricsServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "drand.Metrics";
    impl<T> tonic::server::NamedService for MetricsServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
